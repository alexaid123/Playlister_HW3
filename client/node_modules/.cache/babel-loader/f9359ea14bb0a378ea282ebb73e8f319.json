{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api, { updatePlaylistById, updateSongsById } from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  CREATE_NEW_SONG: \"CREATE_NEW_SONG\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  HANDLE_DRAG_START: \"HANDLE_DRAG_START\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listDeleteActive: false,\n    isDragging: false,\n    draggedTo: false\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo\n          });\n        }\n      // CREATE A NEW Song\n\n      case GlobalStoreActionType.CREATE_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo\n          });\n        }\n      // START DELETE LIST MODAL\n\n      case GlobalStoreActionType.SET_LIST_DELETE_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listDeleteActive: true,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo\n          });\n        }\n      // DRAG START\n\n      case GlobalStoreActionType.HANDLE_DRAG_START:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.currentList,\n            listDeleteActive: store.currentList,\n            isDragging: payload.isDragging,\n            draggedTo: store.draggedTo\n          });\n        }\n      // DRAG OVER\n\n      case GlobalStoreActionType.HANDLE_DRAG_OVER:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.currentList,\n            listDeleteActive: store.currentList,\n            isDragging: payload.isDragging,\n            draggedTo: store.draggedTo\n          });\n        }\n      // DRAG DROP\n\n      case GlobalStoreActionType.HANDLE_DRAG_DROP:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.currentList,\n            listDeleteActive: store.currentList,\n            isDragging: payload.isDragging,\n            draggedTo: payload.draggedTo\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST \n    async function asyncChangeListName(id, newName) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          let par = {\n            list: playlist,\n            change: true\n          };\n          response = await api.updateSongsById(playlist._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n                store.idNamePairs.name = newName;\n                store.loadIdNamePairs();\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id, newName);\n  };\n\n  store.moveCallback = function (sourceId, targetId) {\n    console.log(sourceId);\n  };\n\n  store.deletePlaylist = function (id) {\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylistById(id);\n      console.log(id);\n\n      if (response.data.success) {\n        async function asyncGetPlaylistPairs() {\n          let response = await api.getPlaylistPairs();\n\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: playlist\n              });\n              store.loadIdNamePairs();\n            }\n          }\n        }\n\n        asyncGetPlaylistPairs();\n      }\n    }\n\n    asyncDeleteList(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: {}\n    });\n  };\n\n  store.setIsListDeleteActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_DELETE_ACTIVE,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      const payload = {\n        name: \"Untitled\"\n      };\n      let response = await api.createPlaylist(payload);\n\n      if (response.data.success) {\n        async function asyncGetPlaylistPairs() {\n          let response = await api.getPlaylistPairs();\n\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n              });\n              store.loadIdNamePairs();\n              let num = store.idNamePairs.length;\n              store.newListCounter = num;\n              console.log(response.data.idNamePairs[store.newListCounter]._id);\n              store.setCurrentList(response.data.idNamePairs[store.newListCounter]._id);\n            }\n          }\n        }\n\n        asyncGetPlaylistPairs();\n      }\n    }\n\n    asyncCreateNewList();\n  };\n\n  store.createNewSong = function () {\n    async function asyncCreateNewSong() {\n      console.log(store.currentList.songs.length);\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let song = {\n          title: \"Untitled\",\n          artist: \"Unknown\",\n          youTubeId: \"90M60PzmxEE\"\n        };\n        playlist.songs.push(song);\n\n        async function updateSong(playlist) {\n          let par = {\n            list: playlist,\n            change: false\n          };\n          response = await api.updateSongsById(playlist._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CREATE_NEW_SONG,\n                  payload: playlist\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateSong(playlist);\n      }\n    }\n\n    asyncCreateNewSong();\n  };\n\n  store.deleteSong = function () {\n    async function asyncDeleteSong() {\n      console.log(store.currentList.songs.length);\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.songs.pop();\n\n        async function updateSongD(playlist) {\n          let par = {\n            list: playlist,\n            change: false\n          };\n          response = await api.updateSongsById(playlist._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CREATE_NEW_SONG,\n                  payload: playlist\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateSongD(playlist);\n      }\n    }\n\n    asyncDeleteSong();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"2hRnwRIXDRo2v/Tfsqt5+b+f0XM=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","updatePlaylistById","updateSongsById","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","CREATE_NEW_SONG","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","HANDLE_DRAG_START","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listDeleteActive","isDragging","draggedTo","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","SET_LIST_DELETE_ACTIVE","HANDLE_DRAG_OVER","HANDLE_DRAG_DROP","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","par","list","change","_id","getListPairs","getPlaylistPairs","pairsArray","loadIdNamePairs","moveCallback","sourceId","targetId","console","log","deletePlaylist","asyncDeleteList","deletePlaylistById","asyncGetPlaylistPairs","closeCurrentList","setIsListNameEditActive","setIsListDeleteActive","asyncLoadIdNamePairs","createNewList","asyncCreateNewList","createPlaylist","num","length","setCurrentList","createNewSong","asyncCreateNewSong","songs","song","title","artist","youTubeId","push","updateSong","deleteSong","asyncDeleteSong","pop","updateSongD","asyncSetCurrentList","history","getPlaylistSize","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["C:/Users/alexa/OneDrive/Desktop/CSE 316/Playlister_HW3/Playlister_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api, { updatePlaylistById,  updateSongsById} from '../api'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    CREATE_NEW_SONG: \"CREATE_NEW_SONG\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    HANDLE_DRAG_START: \"HANDLE_DRAG_START\",\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        listDeleteActive: false,\r\n        isDragging: false,\r\n        draggedTo: false\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo\r\n                })\r\n            }\r\n            // CREATE A NEW Song\r\n            case GlobalStoreActionType.CREATE_NEW_SONG: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo\r\n                });\r\n            }\r\n\r\n            // START DELETE LIST MODAL\r\n            case GlobalStoreActionType.SET_LIST_DELETE_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    listDeleteActive: true,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo\r\n                });\r\n            }\r\n\r\n            // DRAG START\r\n            case GlobalStoreActionType.HANDLE_DRAG_START: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.currentList,\r\n                    listDeleteActive: store.currentList,\r\n                    isDragging: payload.isDragging,\r\n                    draggedTo: store.draggedTo\r\n                });\r\n            }\r\n\r\n            // DRAG OVER\r\n            case GlobalStoreActionType.HANDLE_DRAG_OVER: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.currentList,\r\n                    listDeleteActive: store.currentList,\r\n                    isDragging: payload.isDragging,\r\n                    draggedTo: store.draggedTo\r\n                });\r\n            }\r\n\r\n            // DRAG DROP\r\n            case GlobalStoreActionType.HANDLE_DRAG_DROP: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.currentList,\r\n                    listDeleteActive: store.currentList,\r\n                    isDragging: payload.isDragging,\r\n                    draggedTo: payload.draggedTo\r\n                });\r\n            }\r\n\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST \r\n        async function asyncChangeListName(id, newName) {\r\n            let response = await api.getPlaylistById(id); \r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    let par = {list: playlist, change: true}\r\n                   response = await api.updateSongsById(playlist._id, par);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                                store.idNamePairs.name = newName;\r\n                                store.loadIdNamePairs();\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id, newName);\r\n    }\r\n\r\n\r\n    store.moveCallback = function (sourceId, targetId)\r\n    {\r\n        console.log(sourceId)\r\n    }\r\n\r\n\r\n    store.deletePlaylist = function (id) {\r\n        async function asyncDeleteList(id) {\r\n            let response = await api.deletePlaylistById(id);\r\n            console.log(id);\r\n            if (response.data.success)\r\n            {\r\n                async function asyncGetPlaylistPairs()\r\n                {\r\n                    let response = await api.getPlaylistPairs();\r\n                    if (response.data.success) {\r\n                    let playlist = response.data.playlist;\r\n                    if (response.data.success) {\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n                            payload: playlist\r\n                        });\r\n                        store.loadIdNamePairs();\r\n                    }\r\n                }\r\n                }\r\n                asyncGetPlaylistPairs();\r\n            }\r\n        }\r\n        asyncDeleteList(id);\r\n    }\r\n\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    store.setIsListDeleteActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_DELETE_ACTIVE,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.createNewList = function () {\r\n        async function asyncCreateNewList() {\r\n            const payload = { name: \"Untitled\"}\r\n            let response = await api.createPlaylist(payload);\r\n            if (response.data.success)\r\n            {\r\n                async function asyncGetPlaylistPairs()\r\n                {\r\n                    let response = await api.getPlaylistPairs();\r\n                    if (response.data.success) {\r\n                    let playlist = response.data.playlist;\r\n                    if (response.data.success) {\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                            payload: playlist\r\n                        });\r\n                        store.loadIdNamePairs();\r\n                        let num = store.idNamePairs.length;\r\n                        store.newListCounter = num;\r\n                        console.log(response.data.idNamePairs[store.newListCounter]._id);\r\n                        store.setCurrentList(response.data.idNamePairs[store.newListCounter]._id);\r\n                    }\r\n                }\r\n                }\r\n                asyncGetPlaylistPairs();\r\n            }\r\n            \r\n        }\r\n        asyncCreateNewList();\r\n    }\r\n\r\n    store.createNewSong = function () \r\n    {\r\n        async function asyncCreateNewSong() {\r\n            console.log(store.currentList.songs.length);\r\n            let response = await api.getPlaylistById(store.currentList._id); \r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                let song = {title: \"Untitled\", artist: \"Unknown\", youTubeId: \"90M60PzmxEE\"};\r\n                playlist.songs.push(song);\r\n                async function updateSong(playlist) {\r\n                    let par = {list: playlist, change: false}\r\n                   response = await api.updateSongsById(playlist._id, par);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CREATE_NEW_SONG,\r\n                                    payload: playlist\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateSong(playlist);\r\n            }\r\n        }\r\n        asyncCreateNewSong();\r\n     }\r\n\r\n\r\n     store.deleteSong = function () \r\n    {\r\n        async function asyncDeleteSong() {\r\n            console.log(store.currentList.songs.length);\r\n            let response = await api.getPlaylistById(store.currentList._id); \r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.songs.pop();\r\n                async function updateSongD(playlist) {\r\n                    let par = {list: playlist, change: false}\r\n                   response = await api.updateSongsById(playlist._id, par);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CREATE_NEW_SONG,\r\n                                    payload: playlist\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateSongD(playlist);\r\n            }\r\n        }\r\n        asyncDeleteSong();\r\n     }\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                    store.history.push(\"/playlist/\" + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setlistNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}