{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api, { updatePlaylistById, updateSongsById } from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  CREATE_NEW_SONG: \"CREATE_NEW_SONG\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  HANDLE_DRAG: \"HANDLE_DRAG\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  let tmpList = {\n    _id: \"634757b26ade287e4061c69d\",\n    name: \"Proggy Pop\",\n    songs: []\n  };\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listDeleteActive: false,\n    isDragging: false,\n    draggedTo: false,\n    listToDelete: tmpList\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDelete: store.listToDelete\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDelete: store.listToDelete\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDelete: store.listToDelete\n          });\n        }\n      // CREATE A NEW Song\n\n      case GlobalStoreActionType.CREATE_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDelete: store.listToDelete\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDelete: store.listToDelete\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDelete: payload\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDelete: store.listToDelete\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDelete: store.listToDelete\n          });\n        }\n      // START DELETE LIST MODAL\n\n      case GlobalStoreActionType.SET_LIST_DELETE_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listDeleteActive: true,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDelete: store.listToDelete\n          });\n        }\n      // DRAG START\n\n      case GlobalStoreActionType.HANDLE_DRAG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.currentList,\n            listDeleteActive: store.currentList,\n            isDragging: payload.isDragging,\n            draggedTo: payload.draggedTo,\n            listToDelete: store.listToDelete\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST \n    async function asyncChangeListName(id, newName) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          let par = {\n            list: playlist,\n            change: true\n          };\n          response = await api.updateSongsById(playlist._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n                store.idNamePairs.name = newName;\n                store.loadIdNamePairs();\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id, newName);\n  };\n\n  store.handleMove = function (first, second) {\n    storeReducer({\n      type: GlobalStoreActionType.HANDLE_DRAG,\n      payload: {\n        isDragging: first,\n        draggedTo: second\n      }\n    });\n  };\n\n  store.moveCallback = function (start, end) {\n    start = start.substring(0, 1);\n    end = end.substring(0, 1);\n\n    async function asyncMoveSong(start, end) {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let list = response.data.playlist; // WE NEED TO UPDATE THE STATE FOR THE APP\n\n        list.songs.splice(end, 0, list.songs.splice(start, 1)[0]);\n\n        async function updateSong(list) {\n          let par = {\n            list: list,\n            change: false\n          };\n          response = await api.updateSongsById(list._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(list) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CREATE_NEW_SONG,\n                  payload: list\n                });\n              }\n            }\n\n            getListPairs(list);\n          }\n        }\n\n        updateSong(list);\n      }\n    }\n\n    asyncMoveSong(start, end);\n  };\n\n  store.deletePlaylist = function (id) {\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylistById(id);\n      console.log(id);\n\n      if (response.data.success) {\n        async function asyncGetPlaylistPairs() {\n          let response = await api.getPlaylistPairs();\n\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: playlist\n              });\n              store.loadIdNamePairs();\n            }\n          }\n        }\n\n        asyncGetPlaylistPairs();\n      }\n    }\n\n    asyncDeleteList(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: {}\n    });\n  };\n\n  store.setIsListDeleteActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_DELETE_ACTIVE,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      const payload = {\n        name: \"Untitled\"\n      };\n      let response = await api.createPlaylist(payload);\n\n      if (response.data.success) {\n        async function asyncGetPlaylistPairs() {\n          let response = await api.getPlaylistPairs();\n\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n              });\n              store.loadIdNamePairs();\n              let num = store.idNamePairs.length;\n              store.newListCounter = num;\n              console.log(response.data.idNamePairs[store.newListCounter]._id);\n              store.setCurrentList(response.data.idNamePairs[store.newListCounter]._id);\n            }\n          }\n        }\n\n        asyncGetPlaylistPairs();\n      }\n    }\n\n    asyncCreateNewList();\n  };\n\n  store.createNewSong = function () {\n    async function asyncCreateNewSong() {\n      console.log(store.currentList.songs.length);\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let song = {\n          title: playlist.songs.length,\n          artist: \"Unknown\",\n          youTubeId: \"90M60PzmxEE\"\n        };\n        playlist.songs.push(song);\n\n        async function updateSong(playlist) {\n          let par = {\n            list: playlist,\n            change: false\n          };\n          response = await api.updateSongsById(playlist._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CREATE_NEW_SONG,\n                  payload: playlist\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateSong(playlist);\n      }\n    }\n\n    asyncCreateNewSong();\n  };\n\n  store.deleteSong = function (index) {\n    async function asyncDeleteSong(index) {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        index = index.substring(5);\n        console.log(\"Deleted this index -> \" + index);\n        console.log(playlist.songs);\n        playlist.songs.splice(index, 1);\n\n        async function updateSongD(playlist) {\n          let par = {\n            list: playlist,\n            change: false\n          };\n          response = await api.updateSongsById(playlist._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CREATE_NEW_SONG,\n                  payload: playlist\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateSongD(playlist);\n      }\n    }\n\n    asyncDeleteSong(index);\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"74RyNc1IY2tKCpGtsGoTywYQUvs=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","updatePlaylistById","updateSongsById","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","CREATE_NEW_SONG","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","HANDLE_DRAG","tps","useGlobalStore","tmpList","_id","name","songs","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listDeleteActive","isDragging","draggedTo","listToDelete","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","SET_LIST_DELETE_ACTIVE","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","updateList","par","list","change","getListPairs","getPlaylistPairs","pairsArray","loadIdNamePairs","handleMove","first","second","moveCallback","start","end","substring","asyncMoveSong","splice","updateSong","deletePlaylist","asyncDeleteList","deletePlaylistById","console","log","asyncGetPlaylistPairs","closeCurrentList","setIsListNameEditActive","setIsListDeleteActive","asyncLoadIdNamePairs","createNewList","asyncCreateNewList","createPlaylist","num","length","setCurrentList","createNewSong","asyncCreateNewSong","song","title","artist","youTubeId","push","deleteSong","index","asyncDeleteSong","updateSongD","asyncSetCurrentList","history","getPlaylistSize","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["C:/Users/alexa/OneDrive/Desktop/CSE 316/Playlister_HW3/myHW/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api, { updatePlaylistById,  updateSongsById} from '../api'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    CREATE_NEW_SONG: \"CREATE_NEW_SONG\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    HANDLE_DRAG: \"HANDLE_DRAG\",\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    let tmpList = {_id: \"634757b26ade287e4061c69d\", name: \"Proggy Pop\", songs: []};\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        listDeleteActive: false,\r\n        isDragging: false,\r\n        draggedTo: false,\r\n        listToDelete: tmpList\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDelete: store.listToDelete\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDelete: store.listToDelete\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDelete: store.listToDelete\r\n                })\r\n            }\r\n            // CREATE A NEW Song\r\n            case GlobalStoreActionType.CREATE_NEW_SONG: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDelete: store.listToDelete\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDelete: store.listToDelete\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDelete: payload\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDelete: store.listToDelete\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDelete: store.listToDelete\r\n                });\r\n            }\r\n\r\n            // START DELETE LIST MODAL\r\n            case GlobalStoreActionType.SET_LIST_DELETE_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    listDeleteActive: true,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDelete: store.listToDelete\r\n                });\r\n            }\r\n\r\n            // DRAG START\r\n            case GlobalStoreActionType.HANDLE_DRAG: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.currentList,\r\n                    listDeleteActive: store.currentList,\r\n                    isDragging: payload.isDragging,\r\n                    draggedTo: payload.draggedTo,\r\n                    listToDelete: store.listToDelete\r\n                });\r\n            }\r\n\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST \r\n        async function asyncChangeListName(id, newName) {\r\n            let response = await api.getPlaylistById(id); \r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    let par = {list: playlist, change: true}\r\n                   response = await api.updateSongsById(playlist._id, par);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                                store.idNamePairs.name = newName;\r\n                                store.loadIdNamePairs();\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id, newName);\r\n    }\r\n\r\n    store.handleMove = function (first, second)\r\n    {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.HANDLE_DRAG,\r\n            payload: {\r\n                isDragging: first,\r\n                draggedTo: second\r\n            }\r\n        });\r\n    }\r\n\r\n    store.moveCallback = function (start, end)\r\n    {\r\n        start = start.substring(0,1);\r\n        end = end.substring(0,1);\r\n        async function asyncMoveSong(start, end) {\r\n            let response = await api.getPlaylistById(store.currentList._id); \r\n            if (response.data.success) {\r\n               \r\n                let list = response.data.playlist;\r\n                \r\n                // WE NEED TO UPDATE THE STATE FOR THE APP\r\n               list.songs.splice(end, 0, list.songs.splice(start, 1)[0]);\r\n                async function updateSong(list) {\r\n                    let par = {list: list, change: false}\r\n                   response = await api.updateSongsById(list._id, par);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(list) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CREATE_NEW_SONG,\r\n                                    payload: list\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(list);\r\n                    }\r\n                }\r\n                updateSong(list);\r\n            }\r\n        }\r\n        asyncMoveSong(start, end);\r\n    }\r\n\r\n\r\n    store.deletePlaylist = function (id) {\r\n        async function asyncDeleteList(id) {\r\n            let response = await api.deletePlaylistById(id);\r\n            console.log(id);\r\n            if (response.data.success)\r\n            {\r\n                async function asyncGetPlaylistPairs()\r\n                {\r\n                    let response = await api.getPlaylistPairs();\r\n                    if (response.data.success) {\r\n                    let playlist = response.data.playlist;\r\n                    if (response.data.success) {\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n                            payload: playlist\r\n                        });\r\n                        store.loadIdNamePairs();\r\n                    }\r\n                }\r\n                }\r\n                asyncGetPlaylistPairs();\r\n            }\r\n        }\r\n        asyncDeleteList(id);\r\n    }\r\n\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    store.setIsListDeleteActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_DELETE_ACTIVE,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.createNewList = function () {\r\n        async function asyncCreateNewList() {\r\n            const payload = { name: \"Untitled\"}\r\n            let response = await api.createPlaylist(payload);\r\n            if (response.data.success)\r\n            {\r\n                async function asyncGetPlaylistPairs()\r\n                {\r\n                    let response = await api.getPlaylistPairs();\r\n                    if (response.data.success) {\r\n                    let playlist = response.data.playlist;\r\n                    if (response.data.success) {\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                            payload: playlist\r\n                        });\r\n                        store.loadIdNamePairs();\r\n                        let num = store.idNamePairs.length;\r\n                        store.newListCounter = num;\r\n                        console.log(response.data.idNamePairs[store.newListCounter]._id);\r\n                        store.setCurrentList(response.data.idNamePairs[store.newListCounter]._id);\r\n                    }\r\n                }\r\n                }\r\n                asyncGetPlaylistPairs();\r\n            }\r\n            \r\n        }\r\n        asyncCreateNewList();\r\n    }\r\n\r\n    store.createNewSong = function () \r\n    {\r\n        async function asyncCreateNewSong() {\r\n            console.log(store.currentList.songs.length);\r\n            let response = await api.getPlaylistById(store.currentList._id); \r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                let song = {title: playlist.songs.length, artist: \"Unknown\", youTubeId: \"90M60PzmxEE\"};\r\n                playlist.songs.push(song);\r\n                async function updateSong(playlist) {\r\n                    let par = {list: playlist, change: false}\r\n                   response = await api.updateSongsById(playlist._id, par);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CREATE_NEW_SONG,\r\n                                    payload: playlist\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateSong(playlist);\r\n            }\r\n        }\r\n        asyncCreateNewSong();\r\n     }\r\n\r\n\r\n     store.deleteSong = function (index) \r\n    {\r\n        async function asyncDeleteSong(index) {\r\n            let response = await api.getPlaylistById(store.currentList._id); \r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                \r\n                index = index.substring(5);\r\n                console.log(\"Deleted this index -> \" + index);\r\n                console.log(playlist.songs);\r\n                playlist.songs.splice(index, 1);\r\n                 \r\n                async function updateSongD(playlist) {\r\n                    let par = {list: playlist, change: false}\r\n                   response = await api.updateSongsById(playlist._id, par);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CREATE_NEW_SONG,\r\n                                    payload: playlist\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateSongD(playlist);\r\n            }\r\n        }\r\n        asyncDeleteSong(index);\r\n     }\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                    store.history.push(\"/playlist/\" + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setlistNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}