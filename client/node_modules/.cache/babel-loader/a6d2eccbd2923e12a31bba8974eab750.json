{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api, { updatePlaylistById, updateSongsById } from '../api';\nimport { AddSong_Transaction } from '../components';\nimport { EditSong_Transaction } from '../components';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  CREATE_NEW_SONG: \"CREATE_NEW_SONG\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  HANDLE_DRAG: \"HANDLE_DRAG\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n  MARK_SONG_FOR_EDITING: \"MARK_SONG_FOR_EDITING\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listDeleteActive: false,\n    isDragging: false,\n    draggedTo: false,\n    listToDeleteName: null,\n    listToDeleteId: null,\n    deleteSongName: null,\n    deleteSongid: null,\n    editSongId: null,\n    editSongPrevTitle: null,\n    editSongPrevArtist: null,\n    editSongPrevYId: null,\n    editSongCur: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDeleteName: store.listToDeleteName,\n            listToDeleteId: store.listToDeleteId,\n            deleteSongName: store.deleteSongName,\n            deleteSongid: store.deleteSongid,\n            editSongId: store.editSongId,\n            editSongPrevTitle: store.editSongPrevTitle,\n            editSongPrevArtist: store.editSongPrevArtist,\n            editSongPrevYId: store.editSongPrevYId,\n            editSongCur: store.editSongCur\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDeleteName: store.listToDeleteName,\n            listToDeleteId: store.listToDeleteId,\n            deleteSongName: store.deleteSongName,\n            deleteSongid: store.deleteSongid,\n            editSongId: store.editSongId,\n            editSongPrevTitle: store.editSongPrevTitle,\n            editSongPrevArtist: store.editSongPrevArtist,\n            editSongPrevYId: store.editSongPrevYId,\n            editSongCur: store.editSongCur\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDeleteName: store.listToDeleteName,\n            listToDeleteId: store.listToDeleteId,\n            deleteSongName: store.deleteSongName,\n            deleteSongid: store.deleteSongid,\n            editSongId: store.editSongId,\n            editSongPrevTitle: store.editSongPrevTitle,\n            editSongPrevArtist: store.editSongPrevArtist,\n            editSongPrevYId: store.editSongPrevYId,\n            editSongCur: store.editSongCur\n          });\n        }\n      // CREATE A NEW Song\n\n      case GlobalStoreActionType.CREATE_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDeleteName: store.listToDeleteName,\n            listToDeleteId: store.listToDeleteId,\n            deleteSongName: store.deleteSongName,\n            deleteSongid: store.deleteSongid,\n            editSongId: store.editSongId,\n            editSongPrevTitle: store.editSongPrevTitle,\n            editSongPrevArtist: store.editSongPrevArtist,\n            editSongPrevYId: store.editSongPrevYId,\n            editSongCur: store.editSongCur\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDeleteName: store.listToDeleteName,\n            listToDeleteId: store.listToDeleteId,\n            deleteSongName: store.deleteSongName,\n            deleteSongid: store.deleteSongid,\n            editSongId: store.editSongId,\n            editSongPrevTitle: store.editSongPrevTitle,\n            editSongPrevArtist: store.editSongPrevArtist,\n            editSongPrevYId: store.editSongPrevYId,\n            editSongCur: store.editSongCur\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDeleteName: payload.name,\n            listToDeleteId: payload.id,\n            deleteSongName: store.deleteSongName,\n            deleteSongid: store.deleteSongid,\n            editSongId: store.editSongId,\n            editSongPrevTitle: store.editSongPrevTitle,\n            editSongPrevArtist: store.editSongPrevArtist,\n            editSongPrevYId: store.editSongPrevYId,\n            editSongCur: store.editSongCur\n          });\n        }\n      // PREPARE TO DELETE A SONG\n\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDeleteName: store.listToDeleteName,\n            listToDeleteId: store.listToDeleteId,\n            deleteSongName: payload.name,\n            deleteSongid: payload.deleteInd,\n            editSongId: store.editSongId,\n            editSongPrevTitle: store.editSongPrevTitle,\n            editSongPrevArtist: store.editSongPrevArtist,\n            editSongPrevYId: store.editSongPrevYId,\n            editSongCur: store.editSongCur\n          });\n        }\n      // PREPARE TO EDIT A SONG\n\n      case GlobalStoreActionType.MARK_SONG_FOR_EDITING:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDeleteName: store.listToDeleteName,\n            listToDeleteId: store.listToDeleteId,\n            deleteSongName: store.deleteSongName,\n            deleteSongid: store.deleteSongid,\n            editSongId: payload.id,\n            editSongPrevTitle: payload.titl,\n            editSongPrevArtist: payload.artis,\n            editSongPrevYId: payload.yI,\n            editSongCur: payload.pote\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDeleteName: store.listToDeleteName,\n            listToDeleteId: store.listToDeleteId,\n            deleteSongName: store.deleteSongName,\n            deleteSongid: store.deleteSongid,\n            editSongId: store.editSongId\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDeleteName: store.listToDeleteName,\n            listToDeleteId: store.listToDeleteId,\n            deleteSongName: store.deleteSongName,\n            deleteSongid: store.deleteSongid,\n            editSongId: store.editSongId\n          });\n        }\n      // START DELETE LIST MODAL\n\n      case GlobalStoreActionType.SET_LIST_DELETE_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listDeleteActive: true,\n            isDragging: store.isDragging,\n            draggedTo: store.draggedTo,\n            listToDeleteName: store.listToDeleteName,\n            listToDeleteId: store.listToDeleteId,\n            deleteSongName: store.deleteSongName,\n            deleteSongid: store.deleteSongid,\n            editSongId: store.editSongId\n          });\n        }\n      // DRAG START\n\n      case GlobalStoreActionType.HANDLE_DRAG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.currentList,\n            listDeleteActive: store.currentList,\n            isDragging: payload.isDragging,\n            draggedTo: payload.draggedTo,\n            listToDeleteName: store.listToDeleteName,\n            listToDeleteId: store.listToDeleteId,\n            deleteSongName: store.deleteSongName,\n            deleteSongid: store.deleteSongid,\n            editSongId: store.editSongId\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.undo = function () {\n    if (tps.hasTransactionToUndo()) {\n      tps.undoTransaction(); //this.view.updateToolbarButtons(this);\n    }\n  };\n\n  store.redo = function () {\n    if (tps.hasTransactionToRedo()) {\n      tps.doTransaction(); //this.view.updateToolbarButtons(this);\n    }\n  };\n\n  store.addAddSongTransaction = function () {\n    let transaction = new AddSong_Transaction(store);\n    tps.addTransaction(transaction);\n  };\n\n  store.addEditSongTransaction = function () {\n    console.log(store.editSongCur);\n    let transaction = new EditSong_Transaction(store, store.editSongId, store.editSongPrevTitle, store.editSongPrevArtist, store.editSongPrevYId, store.editSongCur);\n    tps.addTransaction(transaction);\n  };\n\n  store.disableButton = function (id) {\n    let button = document.getElementById(id);\n    button.className = \"playlister-button-disabled\";\n    button.disabled = true;\n  };\n\n  store.enableButton = function (id) {\n    let button = document.getElementById(id);\n    button.classList.remove(\"disabled\");\n    button.disabled = false;\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST \n    async function asyncChangeListName(id, newName) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          let par = {\n            list: playlist,\n            change: true\n          };\n          response = await api.updateSongsById(playlist._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n                store.idNamePairs.name = newName;\n                store.loadIdNamePairs();\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id, newName);\n  };\n\n  store.handleMove = function (first, second) {\n    storeReducer({\n      type: GlobalStoreActionType.HANDLE_DRAG,\n      payload: {\n        isDragging: first,\n        draggedTo: second\n      }\n    });\n  };\n\n  store.moveCallback = function (start, end) {\n    start = start.substring(0, 1);\n    end = end.substring(0, 1);\n\n    async function asyncMoveSong(start, end) {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let list = response.data.playlist; // WE NEED TO UPDATE THE STATE FOR THE APP\n\n        list.songs.splice(end, 0, list.songs.splice(start, 1)[0]);\n\n        async function updateSong(list) {\n          let par = {\n            list: list,\n            change: false\n          };\n          response = await api.updateSongsById(list._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(list) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CREATE_NEW_SONG,\n                  payload: list\n                });\n              }\n            }\n\n            getListPairs(list);\n          }\n        }\n\n        updateSong(list);\n      }\n    }\n\n    asyncMoveSong(start, end);\n  };\n\n  store.deletePlaylist = function (id) {\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylistById(id);\n\n      if (response.data.success) {\n        async function asyncGetPlaylistPairs() {\n          let response = await api.getPlaylistPairs();\n\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n\n            if (response.data.success) {\n              store.loadIdNamePairs();\n            }\n          }\n        }\n\n        asyncGetPlaylistPairs();\n      }\n    }\n\n    asyncDeleteList(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: {}\n    });\n  };\n\n  store.setIsListDeleteActive = function (id) {\n    async function asyncGetPlaylist(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: {\n            name: playlist.name,\n            id: playlist._id\n          }\n        });\n      }\n    }\n\n    asyncGetPlaylist(id);\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      const payload = {\n        name: \"Untitled\"\n      };\n      let response = await api.createPlaylist(payload);\n\n      if (response.data.success) {\n        async function asyncGetPlaylistPairs() {\n          let response = await api.getPlaylistPairs();\n\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n\n            if (response.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n              });\n              store.loadIdNamePairs();\n              let num = store.idNamePairs.length;\n              store.newListCounter = num;\n              store.setCurrentList(response.data.idNamePairs[store.newListCounter]._id);\n            }\n          }\n        }\n\n        asyncGetPlaylistPairs();\n      }\n    }\n\n    asyncCreateNewList();\n  };\n\n  store.setSongEdit = function (index) {\n    index = index.substring(0, 1);\n    console.log(index);\n    let songs = store.currentList.songs;\n    let title = songs[index].title;\n    let artist = songs[index].artist;\n    let yID = songs[index].youTubeId;\n    document.getElementById(\"edit-song-title\").value = title;\n    document.getElementById(\"edit-song-artist\").value = artist;\n    document.getElementById(\"edit-song-ytid\").value = yID;\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_EDITING,\n      payload: {\n        id: index,\n        titl: title,\n        artis: artist,\n        yI: yID,\n        song: store.editSongCur\n      }\n    });\n  };\n\n  store.setSongEditT = function () {\n    let title = document.getElementById(\"edit-song-title\").value;\n    let artist = document.getElementById(\"edit-song-artist\").value;\n    let yID = document.getElementById(\"edit-song-ytid\").value;\n    let son = {\n      title: title,\n      artist: artist,\n      youTubeId: yID\n    };\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_EDITING,\n      payload: {\n        id: store.editSongId,\n        titl: store.editSongPrevTitle,\n        artis: store.editSongPrevArtist,\n        yI: store.editSongPrevYId,\n        pote: 1\n      }\n    });\n    console.log(store.editSongCur);\n  };\n\n  store.editSong = function (index, song) {\n    async function asyncEditSong(index) {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.songs[index] = song;\n\n        async function updateSong(playlist) {\n          let par = {\n            list: playlist,\n            change: false\n          };\n          response = await api.updateSongsById(playlist._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CREATE_NEW_SONG,\n                  payload: playlist\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateSong(playlist);\n      }\n    }\n\n    asyncEditSong(index);\n  };\n\n  store.editSongT = function (index) {\n    async function asyncEditSong(index) {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let titl = document.getElementById(\"edit-song-title\").value;\n        let artis = document.getElementById(\"edit-song-artist\").value;\n        let yID = document.getElementById(\"edit-song-ytid\").value;\n        let song = {\n          title: titl,\n          artist: artis,\n          youTubeId: yID\n        };\n        playlist.songs[index] = song;\n\n        async function updateSong(playlist) {\n          let par = {\n            list: playlist,\n            change: false\n          };\n          response = await api.updateSongsById(playlist._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CREATE_NEW_SONG,\n                  payload: playlist\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateSong(playlist);\n      }\n    }\n\n    asyncEditSong(index);\n  };\n\n  store.createNewSong = function () {\n    async function asyncCreateNewSong() {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        store.newListCounter += 1;\n        let song = {\n          title: store.newListCounter,\n          artist: \"Unknown\",\n          youTubeId: \"dQw4w9WgXcQ\"\n        };\n        playlist.songs.push(song);\n\n        async function updateSong(playlist) {\n          let par = {\n            list: playlist,\n            change: false\n          };\n          response = await api.updateSongsById(playlist._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CREATE_NEW_SONG,\n                  payload: playlist\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateSong(playlist);\n      }\n    }\n\n    asyncCreateNewSong();\n  };\n\n  store.setSongDe = function (index) {\n    index = index.substring(5);\n    console.log(index);\n    let pame = index;\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n      payload: {\n        name: store.currentList.songs[index].title,\n        deleteInd: index\n      }\n    });\n    store.deleteSongid = index;\n  };\n\n  store.deleteSong = function (index) {\n    async function asyncDeleteSong(index) {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist; //index = index.substring(5);\n\n        playlist.songs.splice(index, 1);\n\n        async function updateSongD(playlist) {\n          let par = {\n            list: playlist,\n            change: false\n          };\n          response = await api.updateSongsById(playlist._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CREATE_NEW_SONG,\n                  payload: playlist\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateSongD(playlist);\n      }\n    }\n\n    asyncDeleteSong(index);\n  };\n\n  store.deleteSongT = function () {\n    async function asyncDeleteSong() {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.songs.pop();\n\n        async function updateSongD(playlist) {\n          let par = {\n            list: playlist,\n            change: false\n          };\n          response = await api.updateSongsById(playlist._id, par);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CREATE_NEW_SONG,\n                  payload: playlist\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateSongD(playlist);\n      }\n    }\n\n    asyncDeleteSong();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"OLTPzdsk1vAQyI9no4TzFWjr1+E=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","updatePlaylistById","updateSongsById","AddSong_Transaction","EditSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","CREATE_NEW_SONG","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","HANDLE_DRAG","MARK_SONG_FOR_DELETION","MARK_SONG_FOR_EDITING","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listDeleteActive","isDragging","draggedTo","listToDeleteName","listToDeleteId","deleteSongName","deleteSongid","editSongId","editSongPrevTitle","editSongPrevArtist","editSongPrevYId","editSongCur","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","name","id","deleteInd","titl","artis","yI","pote","SET_LIST_DELETE_ACTIVE","undo","hasTransactionToUndo","undoTransaction","redo","hasTransactionToRedo","doTransaction","addAddSongTransaction","transaction","addTransaction","addEditSongTransaction","console","log","disableButton","button","document","getElementById","className","disabled","enableButton","classList","remove","changeListName","newName","asyncChangeListName","response","getPlaylistById","data","success","updateList","par","list","change","_id","getListPairs","getPlaylistPairs","pairsArray","loadIdNamePairs","handleMove","first","second","moveCallback","start","end","substring","asyncMoveSong","songs","splice","updateSong","deletePlaylist","asyncDeleteList","deletePlaylistById","asyncGetPlaylistPairs","closeCurrentList","setIsListNameEditActive","setIsListDeleteActive","asyncGetPlaylist","asyncLoadIdNamePairs","createNewList","asyncCreateNewList","createPlaylist","num","length","setCurrentList","setSongEdit","index","title","artist","yID","youTubeId","value","song","setSongEditT","son","editSong","asyncEditSong","editSongT","createNewSong","asyncCreateNewSong","push","setSongDe","pame","deleteSong","asyncDeleteSong","updateSongD","deleteSongT","pop","asyncSetCurrentList","history","getPlaylistSize","setlistNameActive"],"sources":["C:/Users/alexa/OneDrive/Desktop/CSE 316/Playlister_HW3/myHW/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api, { updatePlaylistById,  updateSongsById} from '../api'\r\nimport {AddSong_Transaction} from '../components'\r\nimport {EditSong_Transaction} from '../components'\r\nexport const GlobalStoreContext = createContext({});\r\n\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    CREATE_NEW_SONG: \"CREATE_NEW_SONG\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    HANDLE_DRAG: \"HANDLE_DRAG\",\r\n    MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\r\n    MARK_SONG_FOR_EDITING: \"MARK_SONG_FOR_EDITING\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        listDeleteActive: false,\r\n        isDragging: false,\r\n        draggedTo: false,\r\n        listToDeleteName: null,\r\n        listToDeleteId: null,\r\n        deleteSongName: null,\r\n        deleteSongid: null,\r\n        editSongId: null,\r\n        editSongPrevTitle: null,\r\n        editSongPrevArtist: null,\r\n        editSongPrevYId: null,\r\n        editSongCur: null\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDeleteName: store.listToDeleteName,\r\n                    listToDeleteId: store.listToDeleteId,\r\n                    deleteSongName: store.deleteSongName,\r\n                    deleteSongid: store.deleteSongid,\r\n                    editSongId: store.editSongId,\r\n                    editSongPrevTitle: store.editSongPrevTitle,\r\n                    editSongPrevArtist: store.editSongPrevArtist,\r\n                    editSongPrevYId: store.editSongPrevYId,\r\n                    editSongCur: store.editSongCur\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDeleteName: store.listToDeleteName,\r\n                    listToDeleteId: store.listToDeleteId,\r\n                    deleteSongName: store.deleteSongName,\r\n                    deleteSongid: store.deleteSongid,\r\n                    editSongId: store.editSongId,\r\n                    editSongPrevTitle: store.editSongPrevTitle,\r\n                    editSongPrevArtist: store.editSongPrevArtist,\r\n                    editSongPrevYId: store.editSongPrevYId,\r\n                    editSongCur: store.editSongCur\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDeleteName: store.listToDeleteName,\r\n                    listToDeleteId: store.listToDeleteId,\r\n                    deleteSongName: store.deleteSongName,\r\n                    deleteSongid: store.deleteSongid,\r\n                    editSongId: store.editSongId,\r\n                    editSongPrevTitle: store.editSongPrevTitle,\r\n                    editSongPrevArtist: store.editSongPrevArtist,\r\n                    editSongPrevYId: store.editSongPrevYId,\r\n                    editSongCur: store.editSongCur\r\n                })\r\n            }\r\n            // CREATE A NEW Song\r\n            case GlobalStoreActionType.CREATE_NEW_SONG: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDeleteName: store.listToDeleteName,\r\n                    listToDeleteId: store.listToDeleteId,\r\n                    deleteSongName: store.deleteSongName,\r\n                    deleteSongid: store.deleteSongid,\r\n                    editSongId: store.editSongId,\r\n                    editSongPrevTitle: store.editSongPrevTitle,\r\n                    editSongPrevArtist: store.editSongPrevArtist,\r\n                    editSongPrevYId: store.editSongPrevYId,\r\n                    editSongCur: store.editSongCur\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDeleteName: store.listToDeleteName,\r\n                    listToDeleteId: store.listToDeleteId,\r\n                    deleteSongName: store.deleteSongName,\r\n                    deleteSongid: store.deleteSongid,\r\n                    editSongId: store.editSongId,\r\n                    editSongPrevTitle: store.editSongPrevTitle,\r\n                    editSongPrevArtist: store.editSongPrevArtist,\r\n                    editSongPrevYId: store.editSongPrevYId,\r\n                    editSongCur: store.editSongCur\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDeleteName: payload.name,\r\n                    listToDeleteId: payload.id,\r\n                    deleteSongName: store.deleteSongName,\r\n                    deleteSongid: store.deleteSongid,\r\n                    editSongId: store.editSongId,\r\n                    editSongPrevTitle: store.editSongPrevTitle,\r\n                    editSongPrevArtist: store.editSongPrevArtist,\r\n                    editSongPrevYId: store.editSongPrevYId,\r\n                    editSongCur: store.editSongCur\r\n                });\r\n            }\r\n\r\n            // PREPARE TO DELETE A SONG\r\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDeleteName: store.listToDeleteName,\r\n                    listToDeleteId: store.listToDeleteId,\r\n                    deleteSongName: payload.name,\r\n                    deleteSongid: payload.deleteInd,\r\n                    editSongId: store.editSongId,\r\n                    editSongPrevTitle: store.editSongPrevTitle,\r\n                    editSongPrevArtist: store.editSongPrevArtist,\r\n                    editSongPrevYId: store.editSongPrevYId,\r\n                    editSongCur: store.editSongCur\r\n                });\r\n            }\r\n\r\n             // PREPARE TO EDIT A SONG\r\n             case GlobalStoreActionType.MARK_SONG_FOR_EDITING: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDeleteName: store.listToDeleteName,\r\n                    listToDeleteId: store.listToDeleteId,\r\n                    deleteSongName: store.deleteSongName,\r\n                    deleteSongid: store.deleteSongid,\r\n                    editSongId: payload.id,\r\n                    editSongPrevTitle: payload.titl,\r\n                    editSongPrevArtist: payload.artis,\r\n                    editSongPrevYId: payload.yI,\r\n                    editSongCur: payload.pote\r\n                });\r\n            }\r\n\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDeleteName: store.listToDeleteName,\r\n                    listToDeleteId: store.listToDeleteId,\r\n                    deleteSongName: store.deleteSongName,\r\n                    deleteSongid: store.deleteSongid,\r\n                    editSongId: store.editSongId\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDeleteName: store.listToDeleteName,\r\n                    listToDeleteId: store.listToDeleteId,\r\n                    deleteSongName: store.deleteSongName,\r\n                    deleteSongid: store.deleteSongid,\r\n                    editSongId: store.editSongId\r\n                });\r\n            }\r\n\r\n            // START DELETE LIST MODAL\r\n            case GlobalStoreActionType.SET_LIST_DELETE_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    listDeleteActive: true,\r\n                    isDragging: store.isDragging,\r\n                    draggedTo: store.draggedTo,\r\n                    listToDeleteName: store.listToDeleteName,\r\n                    listToDeleteId: store.listToDeleteId,\r\n                    deleteSongName: store.deleteSongName,\r\n                    deleteSongid: store.deleteSongid,\r\n                    editSongId: store.editSongId\r\n                });\r\n            }\r\n\r\n            // DRAG START\r\n            case GlobalStoreActionType.HANDLE_DRAG: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.currentList,\r\n                    listDeleteActive: store.currentList,\r\n                    isDragging: payload.isDragging,\r\n                    draggedTo: payload.draggedTo,\r\n                    listToDeleteName: store.listToDeleteName,\r\n                    listToDeleteId: store.listToDeleteId,\r\n                    deleteSongName: store.deleteSongName,\r\n                    deleteSongid: store.deleteSongid,\r\n                    editSongId: store.editSongId\r\n                });\r\n            }\r\n\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    store.undo = function () {\r\n        if (tps.hasTransactionToUndo()) {\r\n            tps.undoTransaction();\r\n            //this.view.updateToolbarButtons(this);\r\n        }\r\n    }\r\n\r\n    store.redo = function () {\r\n        if (tps.hasTransactionToRedo()) {\r\n            tps.doTransaction();\r\n            //this.view.updateToolbarButtons(this);\r\n        }\r\n    }\r\n\r\n    store.addAddSongTransaction = function() {\r\n        let transaction = new AddSong_Transaction(store);\r\n        tps.addTransaction(transaction);\r\n    }\r\n\r\n    store.addEditSongTransaction = function() {\r\n        console.log(store.editSongCur);\r\n        let transaction = new EditSong_Transaction(store, store.editSongId, store.editSongPrevTitle, store.editSongPrevArtist, store.editSongPrevYId, store.editSongCur);\r\n        tps.addTransaction(transaction);\r\n    }\r\n\r\n\r\n\r\n    store.disableButton = function (id) {\r\n        let button = document.getElementById(id);\r\n        button.className = \"playlister-button-disabled\";\r\n        button.disabled = true;\r\n    }\r\n\r\n   store.enableButton = function (id) {\r\n        let button = document.getElementById(id);\r\n        button.classList.remove(\"disabled\");\r\n        button.disabled = false;\r\n    }\r\n\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST \r\n        async function asyncChangeListName(id, newName) {\r\n            let response = await api.getPlaylistById(id); \r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    let par = {list: playlist, change: true}\r\n                   response = await api.updateSongsById(playlist._id, par);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                                store.idNamePairs.name = newName;\r\n                                store.loadIdNamePairs();\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id, newName);\r\n    }\r\n\r\n    store.handleMove = function (first, second)\r\n    {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.HANDLE_DRAG,\r\n            payload: {\r\n                isDragging: first,\r\n                draggedTo: second\r\n            }\r\n        });\r\n    }\r\n\r\n    store.moveCallback = function (start, end)\r\n    {\r\n        start = start.substring(0,1);\r\n        end = end.substring(0,1);\r\n        async function asyncMoveSong(start, end) {\r\n            let response = await api.getPlaylistById(store.currentList._id); \r\n            if (response.data.success) {\r\n               \r\n                let list = response.data.playlist;\r\n                \r\n                // WE NEED TO UPDATE THE STATE FOR THE APP\r\n               list.songs.splice(end, 0, list.songs.splice(start, 1)[0]);\r\n                async function updateSong(list) {\r\n                    let par = {list: list, change: false}\r\n                   response = await api.updateSongsById(list._id, par);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(list) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CREATE_NEW_SONG,\r\n                                    payload: list\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(list);\r\n                    }\r\n                }\r\n                updateSong(list);\r\n            }\r\n        }\r\n        asyncMoveSong(start, end);\r\n    }\r\n\r\n\r\n    store.deletePlaylist = function (id) {\r\n        async function asyncDeleteList(id) {\r\n            let response = await api.deletePlaylistById(id);\r\n            if (response.data.success)\r\n            {\r\n                async function asyncGetPlaylistPairs()\r\n                {\r\n                    let response = await api.getPlaylistPairs();\r\n                    if (response.data.success) {\r\n                    let playlist = response.data.playlist;\r\n                    if (response.data.success) {\r\n                       store.loadIdNamePairs();\r\n                    }\r\n                }\r\n                }\r\n                asyncGetPlaylistPairs();\r\n            }\r\n        }\r\n        asyncDeleteList(id);\r\n    }\r\n\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    store.setIsListDeleteActive = function (id) {\r\n        async function asyncGetPlaylist(id)\r\n        {\r\n                let response = await api.getPlaylistById(id);\r\n                if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                    storeReducer({\r\n                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n                    payload: {name: playlist.name, id: playlist._id}\r\n                    });\r\n                }\r\n        }\r\n        asyncGetPlaylist(id);\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.createNewList = function () {\r\n        async function asyncCreateNewList() {\r\n            const payload = { name: \"Untitled\"}\r\n            let response = await api.createPlaylist(payload);\r\n            if (response.data.success)\r\n            {\r\n                async function asyncGetPlaylistPairs()\r\n                {\r\n                    let response = await api.getPlaylistPairs();\r\n                    if (response.data.success) {\r\n                    let playlist = response.data.playlist;\r\n                    if (response.data.success) {\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                            payload: playlist\r\n                        });\r\n                        store.loadIdNamePairs();\r\n                        let num = store.idNamePairs.length;\r\n                        store.newListCounter = num;\r\n                        store.setCurrentList(response.data.idNamePairs[store.newListCounter]._id);\r\n                    }\r\n                }\r\n                }\r\n                asyncGetPlaylistPairs();\r\n            }\r\n            \r\n        }\r\n        asyncCreateNewList();\r\n    }\r\n\r\n\r\n    store.setSongEdit = function (index)\r\n    {\r\n        index = index.substring(0,1);\r\n        console.log(index);\r\n        let songs = store.currentList.songs;\r\n        let title = songs[index].title;\r\n        let artist = songs[index].artist;\r\n        let yID = songs[index].youTubeId;\r\n        document.getElementById(\"edit-song-title\").value = title;\r\n        document.getElementById(\"edit-song-artist\").value = artist;\r\n        document.getElementById(\"edit-song-ytid\").value = yID;\r\n\r\n        storeReducer({\r\n            type: GlobalStoreActionType.MARK_SONG_FOR_EDITING,\r\n            payload: {id: index, titl: title, artis: artist, yI: yID, song: store.editSongCur}\r\n        });\r\n    }\r\n\r\n    store.setSongEditT = function ()\r\n    {   \r\n        let title = document.getElementById(\"edit-song-title\").value;\r\n        let artist = document.getElementById(\"edit-song-artist\").value;\r\n        let yID = document.getElementById(\"edit-song-ytid\").value;\r\n        let son = {title: title, artist: artist, youTubeId: yID };\r\n        storeReducer({\r\n            type: GlobalStoreActionType.MARK_SONG_FOR_EDITING,\r\n            payload: {id: store.editSongId, titl: store.editSongPrevTitle, artis: store.editSongPrevArtist, yI: store.editSongPrevYId, pote: 1}\r\n        });\r\n        console.log(store.editSongCur)\r\n    }\r\n\r\n\r\n    store.editSong = function (index, song) \r\n    {\r\n        async function asyncEditSong(index) {\r\n            let response = await api.getPlaylistById(store.currentList._id); \r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.songs[index] = song;\r\n                async function updateSong(playlist) {\r\n                    let par = {list: playlist, change: false}\r\n                   response = await api.updateSongsById(playlist._id, par);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CREATE_NEW_SONG,\r\n                                    payload: playlist\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateSong(playlist);\r\n            }\r\n        }\r\n        asyncEditSong(index);\r\n    }\r\n\r\n\r\n    store.editSongT = function (index) \r\n    {\r\n        async function asyncEditSong(index) {\r\n            let response = await api.getPlaylistById(store.currentList._id); \r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                let titl = document.getElementById(\"edit-song-title\").value;\r\n                let artis = document.getElementById(\"edit-song-artist\").value;\r\n                let yID = document.getElementById(\"edit-song-ytid\").value;\r\n                let song = {title: titl, artist: artis, youTubeId: yID };\r\n                playlist.songs[index] = song;\r\n                async function updateSong(playlist) {\r\n                    let par = {list: playlist, change: false}\r\n                   response = await api.updateSongsById(playlist._id, par);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CREATE_NEW_SONG,\r\n                                    payload: playlist\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateSong(playlist);\r\n            }\r\n        }\r\n        asyncEditSong(index);\r\n    }\r\n\r\n    store.createNewSong = function () \r\n    {\r\n        async function asyncCreateNewSong() {\r\n            let response = await api.getPlaylistById(store.currentList._id); \r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                store.newListCounter += 1;\r\n                let song = {title: store.newListCounter, artist: \"Unknown\", youTubeId: \"dQw4w9WgXcQ\"};\r\n                playlist.songs.push(song);\r\n                async function updateSong(playlist) {\r\n                    let par = {list: playlist, change: false}\r\n                   response = await api.updateSongsById(playlist._id, par);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CREATE_NEW_SONG,\r\n                                    payload: playlist\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateSong(playlist);\r\n            }\r\n        }\r\n        asyncCreateNewSong();\r\n     }\r\n\r\n\r\n     store.setSongDe = function (index) \r\n    {\r\n            index = index.substring(5);\r\n            console.log(index);\r\n            let pame = index;\r\n            \r\n            storeReducer({\r\n            type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\r\n            payload: {name: store.currentList.songs[index].title, deleteInd: index}\r\n            });\r\n\r\n            store.deleteSongid = index;\r\n    }\r\n\r\n     store.deleteSong = function (index) \r\n    {\r\n        async function asyncDeleteSong(index) {\r\n            let response = await api.getPlaylistById(store.currentList._id); \r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                \r\n                //index = index.substring(5);\r\n                playlist.songs.splice(index, 1);\r\n                 \r\n                async function updateSongD(playlist) {\r\n                    let par = {list: playlist, change: false}\r\n                   response = await api.updateSongsById(playlist._id, par);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CREATE_NEW_SONG,\r\n                                    payload: playlist\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateSongD(playlist);\r\n            }\r\n        }\r\n        asyncDeleteSong(index);\r\n     }\r\n\r\n     store.deleteSongT = function () \r\n     {\r\n         async function asyncDeleteSong() {\r\n             let response = await api.getPlaylistById(store.currentList._id); \r\n             if (response.data.success) {\r\n                 let playlist = response.data.playlist;\r\n                 playlist.songs.pop();\r\n                  \r\n                 async function updateSongD(playlist) {\r\n                     let par = {list: playlist, change: false}\r\n                    response = await api.updateSongsById(playlist._id, par);\r\n                     if (response.data.success) {\r\n                         async function getListPairs(playlist) {\r\n                             response = await api.getPlaylistPairs();\r\n                             if (response.data.success) {\r\n                                 let pairsArray = response.data.idNamePairs;\r\n                                 storeReducer({\r\n                                     type: GlobalStoreActionType.CREATE_NEW_SONG,\r\n                                     payload: playlist\r\n                                 });\r\n                             }\r\n                         }\r\n                         getListPairs(playlist);\r\n                     }\r\n                 }\r\n                 updateSongD(playlist);\r\n             }\r\n         }\r\n         asyncDeleteSong();\r\n      }\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                    store.history.push(\"/playlist/\" + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setlistNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}